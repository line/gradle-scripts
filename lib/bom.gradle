configure(projectsWithFlags('bom')) {
    apply plugin: 'java-platform'
    apply plugin: 'maven-publish'

    publishing {
        publications {
            bom(MavenPublication) {
                from components.javaPlatform

                pom.packaging = 'pom'
            }
        }
    }

    dependencies {
        constraints {
            boolean isNeededCheck = false
            def bomGroups, subs
            if (rootProject.ext.has('bomGroups')) {
                bomGroups = rootProject.ext.bomGroups
                if (!(bomGroups instanceof Map)) {
                    throw new IllegalStateException("bomGroups must be a Map: ${bomGroups}")
                }
                if (!bomGroups.containsKey(project.path)) {
                    logger.warn(project.name + " won't be included to bomGroups property")
                    isNeededCheck = true;
                }
                subs = bomGroups.get(project.path)
            }

            projectsWithFlags('java', 'publish').toList().sort { a, b ->
                def groupComparison = "${a.group}".compareTo("${b.group}")
                if (groupComparison != 0) {
                    return groupComparison
                }
                return "${a.ext.artifactId}".compareTo("${b.ext.artifactId}")
            }.each { p ->
                if (rootProject.ext.has('bomGroups')) {
                    if (!bomGroups.containsKey(project.path)) {
                        api "${p.group}:${p.ext.artifactId}:${p.version}"
                    } else {
                        if (!(subs.value instanceof List)) {
                            throw new IllegalStateException("bomGroups' value must be a List: ${subs.value}")
                        }

                        if (subs.contains(p.path)) {
                            api "${p.group}:${p.ext.artifactId}:${p.version}"
                        } else if (p.path.startsWith(project.path)) {
                            logger.warn(p.name + " won't be included in " + project.name + " bom")
                            isNeededCheck = true;
                        }
                    }
                } else {
                    api "${p.group}:${p.ext.artifactId}:${p.version}"
                }
            }

            if (isNeededCheck) {
                logger.warn("If not intended, Please check bomGroups property")
            }
        }
    }

    tasks.assemble.dependsOn {
        tasks.generatePomFileForBomPublication
    }
}
